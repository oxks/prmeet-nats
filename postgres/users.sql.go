// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package postgres

import (
	"context"
)

const userGetAll = `-- name: UserGetAll :many
SELECT id, firstname, lastname, email, password, deleted, nickname, created_at FROM USERS
`

func (q *Queries) UserGetAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.Deleted,
			&i.Nickname,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userGetByEmail = `-- name: UserGetByEmail :one
SELECT id, firstname, lastname, email, password, deleted, nickname, created_at FROM USERS WHERE email = $1
`

func (q *Queries) UserGetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Deleted,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}

const userGetById = `-- name: UserGetById :one
SELECT id, firstname, lastname, email, password, deleted, nickname, created_at FROM USERS WHERE id = $1
`

func (q *Queries) UserGetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Deleted,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}

const userGetEmails = `-- name: UserGetEmails :many
SELECT id, email FROM USERS
`

type UserGetEmailsRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UserGetEmails(ctx context.Context) ([]UserGetEmailsRow, error) {
	rows, err := q.db.QueryContext(ctx, userGetEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserGetEmailsRow
	for rows.Next() {
		var i UserGetEmailsRow
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userSignup = `-- name: UserSignup :one
INSERT INTO USERS ("email", "password", "nickname") VALUES ($1, $2, $3)
RETURNING id, firstname, lastname, email, password, deleted, nickname, created_at
`

type UserSignupParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Nickname string `json:"nickname"`
}

func (q *Queries) UserSignup(ctx context.Context, arg UserSignupParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userSignup, arg.Email, arg.Password, arg.Nickname)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Deleted,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}
